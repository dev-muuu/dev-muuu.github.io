<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://dev-muuu.github.io/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="http://dev-muuu.github.io/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2023-12-08T04:36:57+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/feed.xml</id><title type="html">쑤야의 개발 블로그</title><author><name>dev-muuu</name></author><entry><title type="html">두 큐 합 같게 만들기</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/08/%EB%91%90-%ED%81%90-%ED%95%A9-%EA%B0%99%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0.html" rel="alternate" type="text/html" title="두 큐 합 같게 만들기" /><published>2023-12-08T00:00:00+00:00</published><updated>2023-12-08T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/08/%EB%91%90%20%ED%81%90%20%ED%95%A9%20%EA%B0%99%EA%B2%8C%20%EB%A7%8C%EB%93%A4%EA%B8%B0</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/08/%EB%91%90-%ED%81%90-%ED%95%A9-%EA%B0%99%EA%B2%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0.html"><![CDATA[<h2 id="문제"><a href="https://school.programmers.co.kr/learn/courses/30/lessons/118667">문제</a></h2>

<h2 id="approach">Approach</h2>
<hr />

<ul>
  <li>이분 탐색을 풀 때와 같이 접근하였다.</li>
</ul>

<h2 id="logic">Logic</h2>
<hr />

<ul>
  <li>하나의 큐에 대해서만 생각한다.</li>
  <li>기준 값보다 합이 클 경우, dequeue 시킨다.</li>
  <li>기준 값보다 합이 작을 경우, 반대 큐에서 원소를 가져와 enqueue 시킨다.</li>
</ul>

<h3 id="주의할-점">주의할 점</h3>
<hr />

<ul>
  <li>처음 코드를 작성할 때는 queue를 사용했다. 이 경우 매번 dequeue 시킬 때마다 O(N)의 시간 복잡도를 가지게 되다 보니 시간 초과 문제가 발생하였다.</li>
  <li>이를 해결하기 위해 포인터를 사용하였다. dequeue는 현재 가리키는 포인터를 증가시키는 것으로 대신 처리한다.</li>
</ul>

<h2 id="code">Code</h2>
<hr />

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">queue1</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">queue2</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">sum1</span> <span class="o">=</span> <span class="n">queue1</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nv">sum2</span> <span class="o">=</span> <span class="n">queue2</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span> <span class="nv">$0</span> <span class="o">+</span> <span class="nv">$1</span> <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">q1</span> <span class="o">=</span> <span class="n">queue1</span><span class="p">,</span> <span class="n">q2</span> <span class="o">=</span> <span class="n">queue2</span>
    <span class="k">let</span> <span class="nv">target</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
    
    <span class="k">if</span> <span class="n">sum1</span> <span class="o">==</span> <span class="n">target</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">0</span> <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">p1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">repeat</span> <span class="p">{</span>
        <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">sum1</span> <span class="o">&gt;</span> <span class="n">target</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">pop</span> <span class="o">=</span> <span class="n">q1</span><span class="p">[</span><span class="n">p1</span><span class="p">]</span>
            <span class="n">q2</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pop</span><span class="p">)</span>
            <span class="n">sum2</span> <span class="o">+=</span> <span class="n">pop</span>
            <span class="n">sum1</span> <span class="o">-=</span> <span class="n">pop</span>
            <span class="n">p1</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">pop</span> <span class="o">=</span> <span class="n">q2</span><span class="p">[</span><span class="n">p2</span><span class="p">]</span>
            <span class="n">q1</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pop</span><span class="p">)</span>
            <span class="n">sum1</span> <span class="o">+=</span> <span class="n">pop</span>
            <span class="n">sum2</span> <span class="o">-=</span> <span class="n">pop</span>
            <span class="n">p2</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="n">ans</span> <span class="o">&gt;</span> <span class="p">(</span><span class="n">queue1</span><span class="o">.</span><span class="n">count</span> <span class="o">+</span> <span class="n">queue2</span><span class="o">.</span><span class="n">count</span><span class="p">)</span> <span class="o">*</span> <span class="mi">2</span> <span class="p">{</span>
            <span class="k">break</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">sum1</span> <span class="o">==</span> <span class="n">target</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">ans</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">while</span> <span class="o">!</span><span class="n">q1</span><span class="o">.</span><span class="n">isEmpty</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">q2</span><span class="o">.</span><span class="n">isEmpty</span>
    
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<hr />

<ul>
  <li>위의 코드대로 구현할 때의 문제점은 처음 데이터와 동일했을 경우, 종료 코드를 반복문 수행 횟수를 기준으로 하여 따로 작성해야 한다는 점이다.</li>
  <li>아래 참고한 코드처럼 작성할 경우, 위의 문제점을 좀 더 간편하게 해결할 수 있다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">func</span> <span class="nf">reference</span><span class="p">(</span><span class="n">_</span> <span class="nv">queue1</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">queue2</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>

     <span class="k">var</span> <span class="nv">queue</span> <span class="o">=</span> <span class="n">queue1</span> <span class="o">+</span> <span class="n">queue2</span>
     <span class="k">var</span> <span class="nv">sum1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">queue1</span><span class="p">{</span> <span class="n">sum1</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>
     <span class="k">var</span> <span class="nv">sum2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">queue2</span><span class="p">{</span> <span class="n">sum2</span> <span class="o">+=</span> <span class="n">i</span> <span class="p">}</span>

     <span class="k">let</span> <span class="nv">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">sum1</span> <span class="o">+</span> <span class="n">sum2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
     <span class="k">var</span> <span class="nv">pointer1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">pointer2</span> <span class="o">=</span> <span class="n">queue1</span><span class="o">.</span><span class="n">count</span>
     <span class="k">var</span> <span class="nv">count</span> <span class="o">=</span> <span class="mi">0</span>
     <span class="k">while</span> <span class="n">pointer1</span> <span class="o">&lt;=</span> <span class="n">pointer2</span> <span class="o">&amp;&amp;</span> <span class="n">pointer2</span> <span class="o">&lt;</span> <span class="n">queue</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
         <span class="k">if</span> <span class="n">sum1</span> <span class="o">&gt;</span> <span class="n">mid</span> <span class="p">{</span>
             <span class="n">sum1</span> <span class="o">-=</span> <span class="n">queue</span><span class="p">[</span><span class="n">pointer1</span><span class="p">]</span>
             <span class="n">pointer1</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">sum1</span> <span class="o">&lt;</span> <span class="n">mid</span> <span class="p">{</span>
             <span class="n">sum1</span> <span class="o">+=</span> <span class="n">queue</span><span class="p">[</span><span class="n">pointer2</span><span class="p">]</span>
             <span class="n">pointer2</span> <span class="o">+=</span> <span class="mi">1</span>
         <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
             <span class="k">return</span> <span class="n">count</span>
         <span class="p">}</span>
         <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
     <span class="p">}</span>
     <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
 <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="Programmers" /><summary type="html"><![CDATA[문제]]></summary></entry><entry><title type="html">Algorithm with Python</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/Algorithm-with-Python.html" rel="alternate" type="text/html" title="Algorithm with Python" /><published>2023-12-07T00:00:00+00:00</published><updated>2023-12-07T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/Algorithm%20with%20Python</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/Algorithm-with-Python.html"><![CDATA[<p>파이썬으로 알고리즘을 풀기 위해 필요한 개념들을 정리합니다.</p>

<h2 id="문자열">문자열</h2>
<hr />

<ul>
  <li>문자열의 대/소문자화.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="nf">upper</span><span class="p">()</span> <span class="c1"># 대문자
</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="c1"># 소문자
</span></code></pre></div></div>

<ul>
  <li>특정 문자를 기준으로 문자열 분리</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">문자</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="배열">배열</h2>
<hr />

<ul>
  <li>원소 추가</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">배열</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">원소</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>마지막 원소 삭제</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">배열</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>정렬</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">배열</span><span class="p">.</span><span class="nf">sort</span><span class="p">()</span> <span class="c1"># 오름차순
</span><span class="n">배열</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="nb">reversed</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 내림차순
</span></code></pre></div></div>

<ul>
  <li>map으로 배열 값 변환하기</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">배열</span><span class="p">))</span> <span class="c1"># str을 int로 변환
</span><span class="n">ex</span><span class="p">.</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="딕셔너리">딕셔너리</h2>
<hr />

<ul>
  <li>빈 딕셔너리 선언.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<ul>
  <li>딕셔너리에 값이 존재하는지 체크.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">키</span> <span class="ow">in</span> <span class="n">딕셔너리</span>
</code></pre></div></div>

<ul>
  <li>최소값을 가지는 키 값을 반환</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">딕셔너리</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">딕셔너리</span><span class="p">.</span><span class="n">get</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>딕셔너리에서 키 값을 제거</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">딕셔너리</span><span class="p">[</span><span class="n">키</span> <span class="n">값</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="Programmers" /><summary type="html"><![CDATA[파이썬으로 알고리즘을 풀기 위해 필요한 개념들을 정리합니다.]]></summary></entry><entry><title type="html">캐시</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/%EC%BA%90%EC%8B%9C.html" rel="alternate" type="text/html" title="캐시" /><published>2023-12-07T00:00:00+00:00</published><updated>2023-12-07T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/%EC%BA%90%EC%8B%9C</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/12/07/%EC%BA%90%EC%8B%9C.html"><![CDATA[<h2 id="문제"><a href="https://school.programmers.co.kr/learn/courses/30/lessons/17680?language=python3">문제</a></h2>

<h2 id="approach">Approach</h2>
<hr />

<h2 id="logic">Logic</h2>
<hr />

<ul>
  <li>딕셔너리 자료구조를 사용.</li>
  <li>key는 도시 이름, value는 캐시에 들어간 시간.</li>
  <li>LRU 알고리즘에 맞게 딕셔너리 데이터를 변경해준다.</li>
</ul>

<h2 id="code">Code</h2>
<hr />

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">cacheSize</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">cities</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">cache</span> <span class="o">=</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]()</span>
    
    <span class="k">if</span> <span class="n">cacheSize</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">cities</span><span class="o">.</span><span class="n">count</span> <span class="o">*</span> <span class="mi">5</span>
    <span class="p">}</span>
    
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">in</span> <span class="n">cities</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="nf">lowercased</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">cache</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">ans</span> <span class="o">+=</span> <span class="mi">5</span>
            <span class="k">if</span> <span class="n">cache</span><span class="o">.</span><span class="n">count</span> <span class="o">==</span> <span class="n">cacheSize</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">candidate</span> <span class="o">=</span> <span class="n">cache</span><span class="o">.</span><span class="nf">min</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">})</span>
                <span class="n">cache</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">candidate</span><span class="o">!.</span><span class="n">key</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">cache</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ans</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">cacheSize</span><span class="p">,</span> <span class="n">cities</span><span class="p">):</span>
    
    <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">if</span> <span class="n">cacheSize</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">data</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">answer</span> <span class="o">+=</span> <span class="mi">5</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">cache</span><span class="p">)</span> <span class="o">==</span> <span class="n">cacheSize</span><span class="p">:</span>
                <span class="n">candidate</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">cache</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cache</span><span class="p">.</span><span class="n">get</span><span class="p">)</span>
                <span class="k">del</span> <span class="n">cache</span><span class="p">[</span><span class="n">candidate</span><span class="p">]</span>
                
        <span class="n">cache</span><span class="p">[</span><span class="n">data</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
        
    <span class="k">return</span> <span class="n">answer</span>
</code></pre></div></div>

<h2 id="about-python">About Python</h2>
<hr />

<ul>
  <li>문자열의 대/소문자화.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>
<span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>빈 딕셔너리 선언.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span>
</code></pre></div></div>

<ul>
  <li>딕셔너리에 값이 존재하는지 체크.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">키</span> <span class="ow">in</span> <span class="n">딕셔너리</span>
</code></pre></div></div>

<ul>
  <li>최소값을 가지는 키 값을 반환</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">min</span><span class="p">(</span><span class="n">딕셔너리</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">딕셔너리</span><span class="p">.</span><span class="n">get</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>딕셔너리에서 키 값을 제거</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">딕셔너리</span><span class="p">[</span><span class="n">키</span> <span class="n">값</span><span class="p">]</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="Programmers" /><summary type="html"><![CDATA[문제]]></summary></entry><entry><title type="html">Set Up and Tear Down State in Your Tests</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/25/Set-Up-and-Tear-Down-State-in-Your-Tests.html" rel="alternate" type="text/html" title="Set Up and Tear Down State in Your Tests" /><published>2023-11-25T00:00:00+00:00</published><updated>2023-11-25T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/25/Set%20Up%20and%20Tear%20Down%20State%20in%20Your%20Tests</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/25/Set-Up-and-Tear-Down-State-in-Your-Tests.html"><![CDATA[<h2 id="apple-documentation"><a href="https://developer.apple.com/documentation/xctest/xctestcase/set_up_and_tear_down_state_in_your_tests">Apple Documentation</a></h2>

<p>테스트를 실행하기 전 초기 상태를 준비하고, 테스트가 완료된 이후 자원을 청소합니다.</p>

<h2 id="overview">Overview</h2>
<hr />

<p>코드에서 올바른 결과가 나오는지 일관적이고 확실하게 확인하려면 테스트는 예측 가능한 알려진 상태에서 시작해야 합니다. 테스트 클래스의 모든 테스트 방법에 대해 한 번씩 상태를 설정해야 하는 경우도 있고, 각 테스트 방법 전에 알려진 상태로 리셋해야 하는 경우도 있습니다.</p>

<p>각 테스트 방법이나 테스트 클래스가 완료된 후에는 임시 파일이나 스크린샷과 같이 필요없는 파일을 삭제할 수도 있습니다. 또는 고장 진단에 도움이 되도록 테스트 후 최종 상태를 캡처할 수도 있습니다.</p>

<p>테스트를 위해 알려진 상태를 준비하고, 테스트 후 임시 파일을 XCTest 및 XCTestCase의 방법을 사용하여 정리합니다.</p>

<h2 id="decide-when-to-set-up-and-tear-down-state-in-your-test-class">Decide When to Set Up and Tear Down State in Your Test Class</h2>
<hr />

<p>테스트 케이스를 실행할 때, XCTest는 처음에 XCTestCase의 setUp() 클래스 메서드를 호출합니다. 이 메서드를 사용하여 테스트 클래스의 모든 테스트 메서드에 공통된 상태를 설정합니다.</p>

<p>XCTest가 각각의 테스트 메스드를 실행할 때, 설정과 해체 메서드를 아래의 순서로 호출합니다.</p>

<ol>
  <li>XCTest는 각각의 테스트 메서드가 실행될 때 설정 메서드를 실행합니다. <code class="language-plaintext highlighter-rouge">setUp() async throws</code> &gt; <code class="language-plaintext highlighter-rouge">setUpWithError()</code> &gt; <code class="language-plaintext highlighter-rouge">setUp()</code>의 순서로 실행됩니다.</li>
  <li>XCTest가 테스트 메서드를 실행합니다.</li>
  <li>XCTest가 테스트 메서드에 추가한 teardown 블럭을 LIFO(last in, first out) 순서로 실행합니다. 테스트 메서드 실행 이후 이 블럭을 통해 상태를 해제하고 자원을 해제합니다.</li>
  <li>XCTest는 각각의 테스트 메서드가 완료된 이후 해제 메서드를 한 번 실행합니다. <code class="language-plaintext highlighter-rouge">tearDown() async throws</code> &gt; <code class="language-plaintext highlighter-rouge">tearDownWithError()</code> &gt; <code class="language-plaintext highlighter-rouge">tearDown()</code>의 순서로 실행됩니다.</li>
</ol>

<p>XCTest가 모든 테스트 방법을 실행하고 테스트 클래스가 완료되면 XCTestCase tearDown() 클래스 방법을 호출합니다. 이 방법을 사용하여 테스트 클래스의 모든 테스트 방법에 공통적인 상태를 제거합니다.</p>

<h2 id="prepare-and-tear-down-state-for-a-test-class">Prepare and Tear Down State for a Test Class</h2>
<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">tearDown()</code>: 테스트 클래스가 완료된 후 임시 파일을 정리하거나 분석할 데이터를 캡처해야 하는 경우 사용합니다.</li>
</ul>

<h2 id="prepare-and-tear-down-state-for-each-test-method">Prepare and Tear Down State for Each Test Method</h2>
<hr />

<p>설정 요구 조건에 가장 적합한 하나의 setUp 메서드를 선택 후, override 하여 사용합니다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setUp(completion:)</code>: 비동기적으로 상태를 준비해야 하는 경우 사용합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">setUpWithError()</code>: 모든 상태를 동기화하고, 에러를 던지는 경우 사용합니다. 던져진 에러를 잡을 수 있으며, 테스트의 실패를 기록할 수 있습니다.</li>
  <li><code class="language-plaintext highlighter-rouge">setUp()</code>: 상태를 동기화하고, 에러를 다룰 필요가 없는 경우 사용합니다.</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">XCTest</code>는 각각의 테스트가 완료된 이후, <code class="language-plaintext highlighter-rouge">tearDown()</code> 메서드를 실행하므로 XCTest는 테스트는 <code class="language-plaintext highlighter-rouge">tearDown()</code> 메서드가 실행되는 것을 보장하지 않습니다. 만약 테스트 완료 전 크래시가 발생한다면, XCTest는 tearDown 블럭을 호출하지 않습니다.</p>

<h2 id="tear-down-state-after-a-specific-test-method">Tear Down State After a Specific Test Method</h2>
<hr />

<p>특정 테스트 메서드를 완료한 후 즉시 teardown을 완료해야 하는 경우, 테스트 메서드에 teardown 블럭을 추가할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">testMethod1</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="c1">// This is the first test method.</span>
    <span class="c1">// Your testing code goes here.</span>
    <span class="n">addTeardownBlock</span> <span class="p">{</span>
        <span class="c1">// XCTest executes this when testMethod1() ends.</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">func</span> <span class="nf">testMethod2</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="c1">// This is the second test method.</span>
    <span class="c1">// Your testing code goes here.</span>
    <span class="n">addTeardownBlock</span> <span class="p">{</span>
        <span class="c1">// XCTest executes this last when testMethod2() ends.</span>
    <span class="p">}</span>
    <span class="n">addTeardownBlock</span> <span class="p">{</span>
        <span class="c1">// XCTest executes this first when testMethod2() ends.</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>teardown 블럭은 await을 사용하여 비동기적으로 호출될 수 있으며, 테스트가 실패했을 경우 에러를 던질 수도 있습니다.</p>]]></content><author><name>dev-muuu</name></author><category term="XCTest" /><category term="iOS" /><category term="XCTest" /><summary type="html"><![CDATA[Apple Documentation]]></summary></entry><entry><title type="html">Test Cases and Test Methods</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/24/Test-Cases-and-Test-Methods.html" rel="alternate" type="text/html" title="Test Cases and Test Methods" /><published>2023-11-24T00:00:00+00:00</published><updated>2023-11-24T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/24/Test%20Cases%20and%20Test%20Methods</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/24/Test-Cases-and-Test-Methods.html"><![CDATA[<h2 id="apple-documentation"><a href="https://developer.apple.com/documentation/xctest#1612636">Apple Documentation</a></h2>

<p>테스트 함수는 코드의 특정 부분을 테스트할 수 있는 작은 자체적인 함수입니다. 테스트 케이스는 연관된 테스트 함수들의 그룹입니다.</p>

<h2 id="defining-test-cases-and-test-methods">Defining Test Cases and Test Methods</h2>
<hr />

<h3 id="overview">Overview</h3>
<hr />

<p><code class="language-plaintext highlighter-rouge">XCTestCase</code>의 하위 클래스에 하나 이상의 테스트 함수들을 작성하여 관련 테스트들을 그룹화할 수 있습니다.</p>

<p>프로젝트에 테스트를 추가하는 방법:</p>
<ul>
  <li>테스트 타켓에 대한 테스트 케이스인<code class="language-plaintext highlighter-rouge"> XCTestCase</code>의 하위 클래스를 생성합니다.</li>
  <li>테스트 케이스에 대해 하나 이상의 테스트 함수를 추가합니다.</li>
  <li>각각의 테스트 함수에 대해 하나 이상의 테스트 assertion을 추가합니다.</li>
</ul>

<p>테스트 함수는 XCTestCase 하위 클래스의 인스턴스 메서드이지만 매개변수와 반환 값이 없으며, 네이밍이 <code class="language-plaintext highlighter-rouge">test</code>로 시작되어야 합니다. 테스트 함수들은 XCTest 프레임워크에 의해 자동으로 탐지 되어집니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">TableValidationTests</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
    <span class="c1">/// Tests that a new table instance has zero rows and columns.</span>
    <span class="kd">func</span> <span class="nf">testEmptyTableRowAndColumnCount</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">table</span> <span class="o">=</span> <span class="kt">Table</span><span class="p">()</span>
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">rowCount</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Row count was not zero."</span><span class="p">)</span>
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">table</span><span class="o">.</span><span class="n">columnCount</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">"Column count was not zero."</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="asserting-test-conditions">Asserting Test Conditions</h3>
<hr />

<p>코드가 예상대로 작동하는지 보장하기 위해 테스트 함수를 통해 확인할 수 있다. <code class="language-plaintext highlighter-rouge">XCTAssert</code> 함수군을 사용하여 Bool 조건, nil 또는 non-nil 값, 기대값 그리고 던져진 오류를 확인할 수 있습니다.</p>

<h2 id="xctestcase">XCTestCase</h2>
<hr />

<h3 id="set-up-and-tear-down-state-in-your-tests"><a href="">Set Up and Tear Down State in Your Tests</a></h3>

<h2 id="xctest">XCTest</h2>
<hr />]]></content><author><name>dev-muuu</name></author><category term="XCTest" /><category term="iOS" /><category term="XCTest" /><summary type="html"><![CDATA[Apple Documentation]]></summary></entry><entry><title type="html">XCTest</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/22/XCTest.html" rel="alternate" type="text/html" title="XCTest" /><published>2023-11-22T00:00:00+00:00</published><updated>2023-11-22T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/22/XCTest</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/xctest/2023/11/22/XCTest.html"><![CDATA[<h2 id="apple-documentation"><a href="https://developer.apple.com/documentation/xctest">Apple Documentation</a></h2>

<h2 id="overview">Overview</h2>
<hr />

<p><code class="language-plaintext highlighter-rouge">XCTest</code> 프레임워크를 사용하여 Xcode의 프로젝트의 단위 테스트를 작성합니다. 테스트는 코드 실행 중 특정 조건이 충족되었다고 주장하며, 조건이 충족되지 않을 경우에는 실패를 기록합니다.</p>

<p>테스트는 또한 코드 블록의 성능을 측정하여 성능 회귀를 확인할 수 있으며, 애플리케이션의 UI와 상호작용하여 사용자 상호작용 흐름을 검증할 수 있습니다.</p>

<h2 id="topics">Topics</h2>
<hr />

<h3 id="test-cases-and-test-methods"><a href="">Test Cases and Test Methods</a></h3>]]></content><author><name>dev-muuu</name></author><category term="XCTest" /><category term="iOS" /><category term="XCTest" /><summary type="html"><![CDATA[Apple Documentation]]></summary></entry><entry><title type="html">swift로 radio button 구현하기</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/swift/2023/11/14/swift%EB%A1%9C-radio-button-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html" rel="alternate" type="text/html" title="swift로 radio button 구현하기" /><published>2023-11-14T00:00:00+00:00</published><updated>2023-11-14T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/swift/2023/11/14/swift%EB%A1%9C%20radio%20button%20%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/swift/2023/11/14/swift%EB%A1%9C-radio-button-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0.html"><![CDATA[<h2 id="1-구상">1. 구상</h2>
<hr />

<p><code class="language-plaintext highlighter-rouge">radio button</code> ui를 살펴보면 보통 아래와 같다.</p>

<p><img src="https://cdn-images-1.medium.com/max/521/1*mAU3lQVM6mdr1mHfvaRkeg.png" alt="Github_Logo" /></p>

<p>이를 통해 필요한 것이 무엇인지 생각해보면 아래와 같다.</p>

<ul>
  <li>cell을 표현할 ui</li>
  <li>cell에 각 케이스를 나타낼 title</li>
  <li>cell이 선택되었을 때와 선택되지 않았을 때를 나타낼 ui</li>
</ul>

<h2 id="2-protocol-설계">2. protocol 설계</h2>
<hr />

<h3 id="cell">Cell</h3>
<hr />

<p><code class="language-plaintext highlighter-rouge">title label</code> 만 필수로 구현하도록 설정하였으며, 이외 버튼과 같은 다른 component가 필요할 경우 구현체에서 자유롭게 추가해주면 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">RadioButtonCell</span> <span class="k">where</span> <span class="k">Self</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">select</span><span class="p">()</span> <span class="c1">//선택되었을 때의 UI 구현</span>
    <span class="kd">func</span> <span class="nf">deselect</span><span class="p">()</span> <span class="c1">//선택되지 않았을 때의 UI 구현</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="data">Data</h3>
<hr />

<p><code class="language-plaintext highlighter-rouge">RadioButtonCell</code>과 마찬가지로 <code class="language-plaintext highlighter-rouge">title</code> 데이터만 필수로 지정하였다. <code class="language-plaintext highlighter-rouge">enum</code> 타입으로 데이터를 생성하고, <code class="language-plaintext highlighter-rouge">RadioButtonData</code> 프로토콜을 채택하면 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">protocol</span> <span class="kt">RadioButtonData</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-radio-button-class-구현">3. radio button class 구현</h2>
<hr />

<p>spacing과 axis 지정의 편리함과 <code class="language-plaintext highlighter-rouge">radio button</code>은 많지 않은 케이스를 다룰 가능성이 높기에 view 추가의 편의를 위해 <code class="language-plaintext highlighter-rouge">UIStackView</code> 상속을 선택하였다.</p>

<p>각 케이스의 view를 배열에 저장하여 인덱스로 접근하는 것이 아니라 <code class="language-plaintext highlighter-rouge">tag</code>를 활용하여 선택된 view를 가지고 올 수 있도록 구현하였다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="kt">RadioButtonView</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">RadioButtonCell</span><span class="o">&gt;</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="p">{</span>

    <span class="kd">public</span> <span class="nf">init</span><span class="p">(</span><span class="nv">elements</span><span class="p">:</span> <span class="p">[</span><span class="kd">any</span> <span class="kt">RadioButtonData</span><span class="p">],</span> <span class="nv">cellType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">elements</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">hierarchy</span><span class="p">()</span>
        <span class="nf">initialize</span><span class="p">()</span>

    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">//MARK: Public property</span>
    <span class="kd">public</span> <span class="k">var</span> <span class="nv">elementPublisher</span><span class="p">:</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kd">any</span> <span class="kt">RadioButtonData</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;</span> <span class="p">{</span> <span class="c1">//새롭게 선택된 element를 방출.</span>
        <span class="n">$selectedView</span>
            <span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="n">data</span><span class="p">[</span><span class="k">self</span><span class="o">.</span><span class="nf">convert</span><span class="p">(</span><span class="nv">tag</span><span class="p">:</span> <span class="nv">$0</span><span class="o">!.</span><span class="n">tag</span><span class="p">)]</span> <span class="p">}</span>
            <span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">public</span> <span class="k">var</span> <span class="nv">currentElement</span><span class="p">:</span> <span class="p">(</span><span class="kd">any</span> <span class="kt">RadioButtonData</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">data</span><span class="p">[</span><span class="nf">convert</span><span class="p">(</span><span class="nv">tag</span><span class="p">:</span> <span class="n">selectedView</span><span class="o">!.</span><span class="n">tag</span><span class="p">)]</span>
    <span class="p">}</span>
    
    <span class="c1">//MARK: Private property</span>
    <span class="kd">private</span> <span class="kd">typealias</span> <span class="kt">Index</span> <span class="o">=</span> <span class="kt">Int</span>
    <span class="kd">private</span> <span class="kd">typealias</span> <span class="kt">Tag</span> <span class="o">=</span> <span class="kt">Int</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">data</span><span class="p">:</span> <span class="p">[</span><span class="kd">any</span> <span class="kt">RadioButtonData</span><span class="p">]</span>
    
    <span class="kd">@Published</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">selectedView</span><span class="p">:</span> <span class="kt">RadioButtonCell</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="n">oldValue</span><span class="p">?</span><span class="o">.</span><span class="nf">deselect</span><span class="p">()</span>
            <span class="n">selectedView</span><span class="p">?</span><span class="o">.</span><span class="nf">select</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">convert</span><span class="p">(</span><span class="nv">tag</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Index</span> <span class="p">{</span>
        <span class="n">tag</span><span class="o">-</span><span class="mi">1</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">convert</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Tag</span> <span class="p">{</span>
        <span class="n">index</span><span class="o">+</span><span class="mi">1</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">hierarchy</span><span class="p">(){</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">element</span><span class="p">)</span> <span class="k">in</span> <span class="n">data</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">elementView</span> <span class="o">=</span> <span class="kt">T</span><span class="p">()</span>
            <span class="nf">setDefault</span><span class="p">()</span>
            <span class="nf">addTarget</span><span class="p">()</span>
            <span class="nf">addArrangedSubview</span><span class="p">(</span><span class="n">elementView</span><span class="p">)</span>
            
            <span class="kd">func</span> <span class="nf">setDefault</span><span class="p">()</span> <span class="p">{</span>
                <span class="n">elementView</span><span class="o">.</span><span class="n">tag</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="n">i</span><span class="p">)</span>
                <span class="n">elementView</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">element</span><span class="o">.</span><span class="n">title</span>
                <span class="n">elementView</span><span class="o">.</span><span class="nf">deselect</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="kd">func</span> <span class="nf">addTarget</span><span class="p">(){</span>
                <span class="n">elementView</span><span class="o">.</span><span class="nf">addGestureRecognizer</span><span class="p">(</span><span class="kt">UITapGestureRecognizer</span><span class="p">(</span><span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">addElementTarget</span><span class="p">)))</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">addElementTarget</span><span class="p">(</span><span class="n">_</span> <span class="nv">recognizer</span><span class="p">:</span> <span class="kt">UITapGestureRecognizer</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">recognizer</span><span class="o">.</span><span class="n">view</span> <span class="k">as?</span> <span class="kt">RadioButtonCell</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="n">selectedView</span> <span class="o">=</span> <span class="n">view</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">initialize</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">initIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">initView</span> <span class="o">=</span> <span class="nf">viewWithTag</span><span class="p">(</span><span class="nf">convert</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="n">initIndex</span><span class="p">))</span> <span class="k">as?</span> <span class="kt">RadioButtonCell</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="n">selectedView</span> <span class="o">=</span> <span class="n">initView</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-사용">4. 사용</h2>
<hr />

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Gender</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CaseIterable</span><span class="p">,</span> <span class="kt">RadioButtonData</span> <span class="p">{</span>
    
    <span class="k">case</span> <span class="n">man</span>
    <span class="k">case</span> <span class="n">woman</span>
    
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="n">rawValue</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">RadioButtonViewController</span><span class="p">:</span> <span class="kt">ViewController</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">radioButtonFrame</span><span class="p">:</span> <span class="kt">RadioButtonView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">frame</span> <span class="o">=</span> <span class="kt">RadioButtonView</span><span class="p">(</span><span class="nv">elements</span><span class="p">:</span> <span class="kt">Gender</span><span class="o">.</span><span class="n">allCases</span><span class="p">,</span> <span class="nv">cellType</span><span class="p">:</span> <span class="kt">DefaultRadioButtonCell</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        <span class="n">frame</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">vertical</span>
        <span class="n">frame</span><span class="o">.</span><span class="n">spacing</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="k">return</span> <span class="n">frame</span>
    <span class="p">}()</span>

    <span class="o">...</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">bind</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">radioButtonFrame</span><span class="o">.</span><span class="n">elementPublisher</span>
            <span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span>
                <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellable</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Swift" /><category term="iOS" /><category term="Swift" /><summary type="html"><![CDATA[1. 구상]]></summary></entry><entry><title type="html">Ch 6. 기본적인 리팩토링</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/06/Ch-6.-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81.html" rel="alternate" type="text/html" title="Ch 6. 기본적인 리팩토링" /><published>2023-11-06T00:00:00+00:00</published><updated>2023-11-06T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/06/Ch%206.%20%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8%20%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/06/Ch-6.-%EA%B8%B0%EB%B3%B8%EC%A0%81%EC%9D%B8-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81.html"><![CDATA[<h2 id="1-함수-추출하기">1. 함수 추출하기</h2>
<hr />

<p>함수 추출하기란, 코드 조각을 찾아 무슨 일을 하는지 파악한 다음, 독립된 함수로 추출 및 목적에 맞게 이름을 붙이는 것이다. 코드를 언제 독립된 함수로 묶어야 하는 지에 의문을 가질 수 있다. <code class="language-plaintext highlighter-rouge">길이</code>를 기준으로 삼을 수 있으며, <code class="language-plaintext highlighter-rouge">재사용성</code>을 기준으로 삼을 수도 있다. 필자가 생각하는 가장 효율적인 방법은 <code class="language-plaintext highlighter-rouge">목적과 구현을 분리</code>이다. 코드를 보고 무슨 일을 하는지 파악하는데 오랜 시간이 걸린다면, 그 부분을 함수로 추출한 뒤 <strong>목적에 걸맞는 이름</strong>을 지어주면 된다. 이때 목적에 걸맞는 이름이란, 어떻게 함수가 일을 수행하는지가 아닌, <strong><code class="language-plaintext highlighter-rouge">무엇을</code> 하는지</strong>가 드러나도록 이름을 지어주어야 한다. 이 원칙을 적용하게 될 경우, 함수를 짧게 작성하게 될 것이다. 짧은 함수의 이점을 잘 발휘하기 위해서는 이름을 잘 지어야 한다. 이를 통해 코드를 나중에 다시 읽을 때, 함수의 목적이 눈에 바로 들어올 수 있게 될 것이다. 함수 추출에서 유용한 방법은 <code class="language-plaintext highlighter-rouge">중첩 함수</code>를 활용하는 것이다. 중첩 함수를 활용할 경우, <strong>변수를 매개변수로 전달하지 않아도 되며, 사용 범위가 명확</strong>하다는 장점이 있다.</p>

<h2 id="2-함수-인라인하기">2. 함수 인라인하기</h2>
<hr />

<p><code class="language-plaintext highlighter-rouge">함수 인라인</code>이란, <strong>메서드의 내용을 직접 삽입</strong>하는 작업이다. 때로는 함수 본문이 함수의 이름보다 명확한 경우가 있다. 이 경우에는 함수를 제거하고 인라인해주는 것이 더 좋다. 간접 호출은 유용할 수도 있지만 쓸데없는 간접호출은 거슬리는 작업일 뿐이기 때문이다.</p>

<ul>
  <li>함수 인라인 전</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getRating</span><span class="p">(</span><span class="nx">driver</span><span class="p">){</span>
    <span class="k">return</span> <span class="nf">moreThanFiveLateDeliveries</span><span class="p">(</span><span class="nx">driver</span><span class="p">)</span> <span class="p">?</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nf">moreThanFiveLateDeliveries</span><span class="p">(</span><span class="nx">driver</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return </span><span class="p">(</span><span class="nx">driver</span><span class="p">.</span><span class="nx">numberOfLateDeliveries</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">?</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>함수 인라인 후</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">getRating</span><span class="p">(</span><span class="nx">driver</span><span class="p">){</span>
    <span class="k">return </span><span class="p">(</span><span class="nx">driver</span><span class="p">.</span><span class="nx">numberOfLateDeliveries</span> <span class="o">&gt;</span> <span class="mi">5</span><span class="p">)</span> <span class="p">?</span> <span class="mi">2</span> <span class="p">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Book" /><category term="Book" /><category term="Book_Refactoring" /><summary type="html"><![CDATA[1. 함수 추출하기]]></summary></entry><entry><title type="html">Refactoring</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/01/Refactoring.html" rel="alternate" type="text/html" title="Refactoring" /><published>2023-11-01T00:00:00+00:00</published><updated>2023-11-01T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/01/Refactoring</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/book/2023/11/01/Refactoring.html"><![CDATA[<h2 id="chapter">Chapter</h2>
<hr />
<h4 id="6-기본적인-리팩토링-"><a href="">6. 기본적인 리팩토링 </a></h4>]]></content><author><name>dev-muuu</name></author><category term="Book" /><category term="Book" /><category term="Book_Refactoring" /><summary type="html"><![CDATA[Chapter 6. 기본적인 리팩토링]]></summary></entry><entry><title type="html">셔틀 버스</title><link href="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/10/31/%EC%85%94%ED%8B%91-%EB%B2%84%EC%8A%A4.html" rel="alternate" type="text/html" title="셔틀 버스" /><published>2023-10-31T00:00:00+00:00</published><updated>2023-10-31T00:00:00+00:00</updated><id>http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/10/31/%EC%85%94%ED%8B%91%20%EB%B2%84%EC%8A%A4</id><content type="html" xml:base="http://dev-muuu.github.io/jekyll-theme-yat/algorithm/2023/10/31/%EC%85%94%ED%8B%91-%EB%B2%84%EC%8A%A4.html"><![CDATA[<h2 id="문제"><a href="https://school.programmers.co.kr/learn/courses/30/lessons/17678">문제</a></h2>

<h2 id="approach">Approach</h2>
<hr />

<p>콘의 도착 시간이 대기열 배열의 값들에 대해서 조건을 충족하는지를 확인해야 하기 때문에 여러 번의 대기열 배열의 반복이 필요함을 알 수 있다. <code class="language-plaintext highlighter-rouge">제일 늦은 시각</code>을 구하는 것이 목표이며 데이터 크기를 고려하였을 때 이분 탐색 알고리즘을 우선 생각하였다. 시간 복잡도가 최악인 경우 <code class="language-plaintext highlighter-rouge">log (23*60 + 59) * 2000</code> 이므로 시간 초과는 발생하지 않는다.</p>

<h2 id="logic">Logic</h2>
<hr />

<ul>
  <li>계산 및 비교에서 편리함을 위해 <code class="language-plaintext highlighter-rouge">String</code> 타입의 시간 데이터를 모두 분을 단위로 하는 <code class="language-plaintext highlighter-rouge">Int</code>형 타입으로 변환해준다.</li>
  <li>이분 탐색의 포인터가 되는 left와 right는 각각 크루의 도착시간 경계값으로 지정한다.</li>
  <li>대기열에 대해 반복문을 수행하면서, 콘이 탈 수 있는지 없는지만 확인하면 되므로 콘의 시간을 나타내는 mid 보다 현재 대기 중인 크루 시간이 크다면 반복문을 종료한다. 같거나 작다면 셔틀 버스에 태운다.</li>
  <li>콘이 셔틀 버스에 탈 수 있다면 left 값을 갱신, 탈 수 없다면 right 값을 갱신한다. 이때 탈 수 있는 경우에만 ans 값 또한 최대 값으로 갱신한다.</li>
</ul>

<h2 id="code">Code</h2>
<hr />

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">n</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">t</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">m</span><span class="p">:</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">timetable</span><span class="p">:[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    
    <span class="kd">func</span> <span class="nf">convert</span><span class="p">(</span><span class="n">_</span> <span class="nv">time</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">split</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">":"</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>
        <span class="k">return</span> <span class="n">split</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">+</span> <span class="n">split</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">makeAns</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">time</span> <span class="o">=</span> <span class="p">[</span><span class="n">ans</span><span class="o">/</span><span class="mi">60</span><span class="p">,</span> <span class="n">ans</span><span class="o">%</span><span class="mi">60</span><span class="p">]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="nv">$0</span> <span class="o">&lt;</span> <span class="mi">10</span> <span class="p">?</span> <span class="s">"0</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span> <span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span> <span class="p">}</span>
        <span class="k">return</span> <span class="s">"</span><span class="se">\(</span><span class="n">time</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="se">)</span><span class="s">:</span><span class="se">\(</span><span class="n">time</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">timetable</span> <span class="o">=</span> <span class="n">timetable</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="nf">convert</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="o">&lt;</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">startBus</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="s">"09:00"</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">lastBus</span> <span class="o">=</span> <span class="n">startBus</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">t</span>
    
    <span class="k">var</span> <span class="nv">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">left</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="s">"00:00"</span><span class="p">),</span> <span class="k">right</span> <span class="o">=</span> <span class="nf">convert</span><span class="p">(</span><span class="s">"23:59"</span><span class="p">)</span>
    <span class="k">while</span> <span class="k">left</span> <span class="o">&lt;=</span> <span class="k">right</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">mid</span> <span class="o">=</span> <span class="p">(</span><span class="k">left</span><span class="o">+</span><span class="k">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
        <span class="k">var</span> <span class="nv">bus</span> <span class="o">=</span> <span class="p">(</span><span class="n">startBus</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">//현재 셔틀 시간, 현재 탑승 인원</span>
        <span class="k">var</span> <span class="nv">tIdx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">tIdx</span> <span class="o">&lt;</span> <span class="n">timetable</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">mid</span> <span class="o">&lt;</span> <span class="n">timetable</span><span class="p">[</span><span class="n">tIdx</span><span class="p">]</span> <span class="o">||</span> <span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">&gt;</span> <span class="n">lastBus</span> <span class="p">{</span> <span class="k">break</span> <span class="p">}</span>
            <span class="k">if</span> <span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">&gt;=</span> <span class="n">timetable</span><span class="p">[</span><span class="n">tIdx</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">bus</span><span class="o">.</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="p">{</span>
                <span class="n">bus</span><span class="o">.</span><span class="mi">1</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">if</span> <span class="n">bus</span><span class="o">.</span><span class="mi">1</span> <span class="o">==</span> <span class="n">m</span> <span class="p">{</span>
                    <span class="n">bus</span> <span class="o">=</span> <span class="p">(</span><span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">t</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="n">tIdx</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="n">timetable</span><span class="p">[</span><span class="n">tIdx</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">bus</span> <span class="o">=</span> <span class="p">(</span><span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">+</span> <span class="n">t</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="k">if</span> <span class="n">mid</span> <span class="o">&lt;=</span> <span class="n">lastBus</span> <span class="o">&amp;&amp;</span> <span class="n">bus</span><span class="o">.</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">lastBus</span> <span class="o">&amp;&amp;</span> <span class="n">bus</span><span class="o">.</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">m</span> <span class="p">{</span> <span class="c1">//콘이 탈 수 있는지 확인</span>
            <span class="n">ans</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">mid</span><span class="p">,</span> <span class="n">ans</span><span class="p">)</span>
            <span class="k">left</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">right</span> <span class="o">=</span> <span class="n">mid</span><span class="o">-</span><span class="mi">1</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nf">makeAns</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>dev-muuu</name></author><category term="Algorithm" /><category term="Algorithm" /><category term="Programmers" /><summary type="html"><![CDATA[문제]]></summary></entry></feed>